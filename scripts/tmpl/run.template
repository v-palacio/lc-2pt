###############################################
#         Liquid Crystal Simulation           #
###############################################

# System setup
units lj
dimension 3
boundary p p p
atom_style full

# Read input files
include "system.init"
read_data system.data
include "system.settings"
include "system.operations"

# Output settings
thermo_style custom step temp press pe ke etotal density v_vol_fraction pxx pyy pzz pxy pxz pyz
thermo ${output.thermo_freq}

# Regular trajectory for visualization
dump traj all custom ${output.dump_freq} traj/trajectory.lammpstrj id type mol x y z vx vy vz

# Simulation parameters
timestep ${system.timestep}
restart ${output.restart_freq} data/restart.*

# Set initial velocities
velocity all create ${system.tempinit} 12345 dist gaussian

# Energy minimization (conjugate gradient)
min_style cg
minimize ${minimization.etol} ${minimization.ftol} ${minimization.maxiter} ${minimization.maxeval}
write_data data/minimized.data pair ij

# Stage 0 - Initial compression and equilibration
fix nph_0 all nph iso ${system.pressure} ${system.pressure} ${annealing.step0.press_damp}
fix langevin_0 all langevin ${annealing.step0.temp} ${annealing.step0.temp} ${annealing.step0.temp_damp} 23456
fix recenter_0 all recenter INIT INIT INIT
run ${annealing.step0.steps}
unfix nph_0
unfix langevin_0
unfix recenter_0

# Stage 1 - Heating
variable Tstart equal ${annealing.step0.temp}
variable Tend equal ${annealing.step1.temp}
variable Tstep equal 0.1
variable loop index 0
label loop_ramp
  variable T equal "v_Tstart + v_Tstep * v_loop"
  if "v_T > v_Tend" then "jump SELF done_ramp"
  fix nph_1 all nph iso ${system.pressure} ${system.pressure} ${annealing.step1.press_damp}
  fix langevin_1 all langevin v_T v_T ${annealing.step1.temp_damp} 56789
  fix recenter_1 all recenter INIT INIT INIT
  run ${annealing.step1.steps}
  unfix nph_1
  unfix langevin_1
  unfix recenter_1
  next loop
  jump SELF loop_ramp
label done_ramp

# Stage 2 - Hold 
fix nph_2 all nph iso ${system.pressure} ${system.pressure} ${annealing.step2.press_damp}
fix langevin_2 all langevin ${annealing.step2.temp} ${annealing.step2.temp} ${annealing.step2.temp_damp} 45678
fix recenter_2 all recenter INIT INIT INIT
run ${annealing.step2.steps}
write_data data/equilibrated.data pair ij
unfix nph_2
unfix langevin_2
unfix recenter_2

variable pe_diff equal c_thermo_pe[10]-c_thermo_pe[0]
if "${protected_vars.pe_diff} > 1.0" then "print 'System not equilibrated'"

#####################
# Production cycles #
#####################
variable cycle loop 1 ${output.prod_cycles}
label cycle_start

# NPH + Langevin phase
fix nph_prod all nph iso ${system.pressure} ${system.pressure} ${production.press_damp}
fix langevin_prod all langevin ${production.temp} ${production.temp} ${production.temp_damp} 78901
fix recenter_prod all recenter INIT INIT INIT

# Regular trajectory output for NPH phase
dump dump_prod all custom ${output.dump_freq} traj/npt.${protected_vars.cycle}.lammpstrj id type mol x y z vx vy vz

run ${production.npt_steps}
write_data data/npt.${protected_vars.cycle}.data pair ij
undump dump_prod
unfix nph_prod
unfix langevin_prod
unfix recenter_prod

# NVE + Langevin for 2PT analysis
fix nve_run all nve
fix langevin_run all langevin ${production.temp} ${production.temp} ${production.temp_damp} 89012
fix recenter_run all recenter INIT INIT INIT

# High-frequency sampling for 2PT analysis
dump dump_2pt all custom ${production.2pt_freq} traj/2pt.${protected_vars.cycle}.vel id type mol x y z vx vy vz
dump_modify dump_2pt sort id

dump dump_nvt all custom ${output.dump_freq} traj/nvt.${protected_vars.cycle}.lammpstrj id type mol x y z vx vy vz

run ${production.nvt_steps}
write_data data/nvt.${protected_vars.cycle}.data pair ij
undump dump_2pt  
undump dump_nvt
unfix nve_run
unfix langevin_run
unfix recenter_run

next cycle
jump SELFcycle_start

# Final log
log logs/simulation.log